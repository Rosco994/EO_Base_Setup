## Version (number)
# Specifies the version of the configuration file (Default: 1)
# Version 2 must be used, otherwise formulas are specified using an RPN-like syntax
Version = 2

# -----
# HP, TP and SP calculation

# Closest to official server:
hp = 10 + level * 2.5 + (5 * floor(level / 10) * (floor(level / 10) + 1)) + floor(level / 10) * (level % 10) + con * 1.25 * (floor(level / 10) + 1)
tp = 10 + level * 2.5 + (5 * floor(level / 10) * (floor(level / 10) + 1)) + floor(level / 10) * (level % 10) + int * 1.25 * (floor(level / 10) + 1) + wis * 0.75 * (floor(level / 10) + 1)
sp = 20 + level + (10 * floor(level / 20) * (floor(level / 20) + 1)) + floor(level / 20) * (level % 20) + floor((con + 1) / 3)

### Legacy EOSERV formulas (pre-0.8.0)
# hp = 10 + level * 2.5 + con * 2.5
# tp = 10 + level * 2.5 + int * 2.5 + wis * 1.5
# sp = 20 + level * 2

# -----
# Max weight calculation

weight = 70 + base_str

# -----
# Hit rate and damage

# Closest to official server:
hit_rate = iif(target_sitting, 1.0, min(0.8, max(0.2, iif((target_evade + accuracy) == 0, 0.5, accuracy / (target_evade * 2)))))
damage = iif(critical, 1.5, 1.0) * max(1, iif(damage >= target_armor * 2, damage, damage * pow(damage / (target_armor * 2), 2)))

### Legacy EOSERV formulas (pre-0.7.0):
# hit_rate = min(1.0, max(0.2, (accuracy / 100) + iif(critical, 1.0, 0.8) - (modifier * target_evade / 100)))
# damage = iif(critical, 1.5, 1.0) * max(ceil(damage * 0.1), damage - (modifier * target_armor / 3))

### Improved formulas from the EO clone project:
# hit_rate = iif(target_sitting, 1.0, 1 / (1 + exp(-2 * (accuracy - target_evade + 1) / (target_evade + 1))))
# damage = iif(critical, 1.5, 1.0) * max(1, iif(damage >= target_armor, damage - target_armor / 2, damage * pow(damage / target_armor, 2) / 2))

# -----
# Class family stat calculation

# Melee
class.0.damage = str / 3
class.0.accuracy = agi / 3
class.0.evade = agi / 5
class.0.defence = con / 4

# Rogue
class.1.damage = str / 5
class.1.accuracy = agi / 3
class.1.evade = agi / 3
class.1.defence = con / 4

# Magic
class.2.damage = int / 3
class.2.accuracy = wis / 3
class.2.evade = agi / 4
class.2.defence = con / 5

# Archer
class.3.damage = str / 6
class.3.accuracy = agi / 5
class.3.evade = agi / 5
class.3.defence = con / 5

# Peasant
class.4.damage = 0
class.4.accuracy = 0
class.4.evade = 0
class.4.defence = 0
